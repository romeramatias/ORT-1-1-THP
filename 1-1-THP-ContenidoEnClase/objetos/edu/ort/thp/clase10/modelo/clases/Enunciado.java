package edu.ort.thp.clase10.modelo.clases;

public class Enunciado {

	/*
	 * En la academia de inglés "ComoSeDice" se desea implementar un programa para
	 * poder gestionar los alumnos y la deuda de los mismos.
	 * 
	 * De la academia se guardará su nombre, su cantidad de alumnos y los datos de
	 * los mismos.
	 * 
	 * De cada alumno se necesita guardar su número de dni, su nombre, su nivel de
	 * conocimiento (BASICO, INTERMEDIO o AVANZADO), su deuda y su estado (A=alta,
	 * B=baja).
	 * 
	 * Se necesitarán los siguientes métodos:
	 * 
	 * • inscribirAlumno: agregará un alumno a la lista de alumnos de la academia.
	 * Recibirá los datos del mismo y verificará que el alumno no haya sido
	 * ingresado anteriormente. En este caso mostrará un mensaje "el alumno ya
	 * existe" o en caso contrario "alumno agregado con éxito" y sumará uno a la
	 * cantidad de alumnos de la academia. Al agregar un alumno nuevo su estado será
	 * "A" (alta).
	 * 
	 * • ingresarBajaAlumno: cambiará el estado de un alumno a "B" (baja) pero no
	 * eliminará el alumno de la lista. Recibirá el número de dni del mismo y si el
	 * mismo existe y no tiene deuda le cambiará su estado. En este caso mostrará el
	 * mensaje "estado cambiado con éxito" o en caso contrario "el alumno tiene
	 * deuda o no existe. No puede cambiar de estado".
	 * 
	 * • listarAlumnosNivel: muestra la cantidad de alumnos que están inscriptos y
	 * con estado "A" (alta) en un nivel determinado. El mismo será ingresado por
	 * teclado y el método lo recibirá como parámetro. Muestra el nombre del nivel y
	 * su cantidad de alumnos.
	 * 
	 * • cargarPago: recibe un dni de un alumno y el importe que pagó. Si el alumno
	 * existe restará de su deuda actual el importe recibido. La deuda podría quedar
	 * en negativo. También deberá mostrar un mensaje indicando si pudo cargar el
	 * pago o no.
	 * 
	 * • buscarAlumno: busca si existe un alumno. Este método será privado y
	 * recibirá como parámetro su dni.
	 * 
	 * Los métodos deberán crearse en la clase que corresponda.
	 * 
	 * Se deberán probar todos los métodos desde la clase Parcial2. En la misma se
	 * ingresarán datos de alumnos hasta que el operador ingrese 0 como número de
	 * dni. Una vez que se terminó de cargar los datos también deberán probarse los
	 * métodos ingresarBajaAlumno, listarAlumnosNivel y cargarPago.
	 * 
	 */

}
